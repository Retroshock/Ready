//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `header_logo_mready`.
    static let header_logo_mready = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_logo_mready")
    
    /// `UIImage(named: "header_logo_mready", bundle: ..., traitCollection: ...)`
    static func header_logo_mready(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_logo_mready, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AndroidRepoCell`.
    static let androidRepoCell: Rswift.ReuseIdentifier<AndroidRepoCell> = Rswift.ReuseIdentifier(identifier: "AndroidRepoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.jsonKeys` struct is generated, and contains static references to 10 localization keys.
    struct jsonKeys {
      /// Value: content
      static let content = Rswift.StringResource(key: "content", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: forks_count
      static let forks = Rswift.StringResource(key: "forks", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: full_name
      static let full_name = Rswift.StringResource(key: "full_name", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: id
      static let id = Rswift.StringResource(key: "id", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: login
      static let login = Rswift.StringResource(key: "login", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: name
      static let name = Rswift.StringResource(key: "name", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: owner
      static let owner = Rswift.StringResource(key: "owner", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: stargazers_count
      static let stars = Rswift.StringResource(key: "stars", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: url
      static let link = Rswift.StringResource(key: "link", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: watchers
      static let watchers = Rswift.StringResource(key: "watchers", tableName: "JsonKeys", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: content
      static func content(_: Void = ()) -> String {
        return NSLocalizedString("content", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: forks_count
      static func forks(_: Void = ()) -> String {
        return NSLocalizedString("forks", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: full_name
      static func full_name(_: Void = ()) -> String {
        return NSLocalizedString("full_name", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: id
      static func id(_: Void = ()) -> String {
        return NSLocalizedString("id", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: login
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: name
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("name", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: owner
      static func owner(_: Void = ()) -> String {
        return NSLocalizedString("owner", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: stargazers_count
      static func stars(_: Void = ()) -> String {
        return NSLocalizedString("stars", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: url
      static func link(_: Void = ()) -> String {
        return NSLocalizedString("link", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: watchers
      static func watchers(_: Void = ()) -> String {
        return NSLocalizedString("watchers", tableName: "JsonKeys", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "header_logo_mready") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'header_logo_mready' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let containerViewController = StoryboardViewControllerResource<ContainerViewController>(identifier: "ContainerViewController")
      let mainNavigationController = StoryboardViewControllerResource<MainNavigationController>(identifier: "MainNavigationController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let repoDetailsViewController = StoryboardViewControllerResource<RepoDetailsViewController>(identifier: "RepoDetailsViewController")
      
      func containerViewController(_: Void = ()) -> ContainerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: containerViewController)
      }
      
      func mainNavigationController(_: Void = ()) -> MainNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNavigationController)
      }
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      func repoDetailsViewController(_: Void = ()) -> RepoDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repoDetailsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "header_logo_mready") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'header_logo_mready' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().repoDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repoDetailsViewController' could not be loaded from storyboard 'Main' as 'RepoDetailsViewController'.") }
        if _R.storyboard.main().containerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'containerViewController' could not be loaded from storyboard 'Main' as 'ContainerViewController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().mainNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigationController' could not be loaded from storyboard 'Main' as 'MainNavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
